# This is a .yaml file, just a way to write nested data structures in
# a way so that they don't hurt the eyes of humans. Google for YAML to
# get more info ...


MorseCharacter:
  container:
    name: chars
    type: QList
  model:
    name: CharacterModel
    type: QAbstractTableModel
    # This would disable the automatically generated sort code of the model
    #sort: false
    # This disabled editing directly inside the form:
    #edit_table: false
  view:
    name: CharacterView
    type: QTableView
    # This would disable the automatically generated sort code of the view:
    #sort: false
    delete: true
    insert: true
  dialog:
    # The existence of this "dialog" entry enables editing inside a form
    # after a double-click.
    name: CharacterDialog
    head: "Morse Character"
  fields:
    - {
    # Each normal entry has a 'name', which get's used in the C++ struct.
    # It has also a type, again for the C++ struct.
    name: number,
    type: quint32,
    # Every field with a 'head' will end up in one column of the table.
    head: "Number",
    # This entry is readonly -> won't end up in the dialog form
    readonly: true,
    # TODO: Tool tip
    # TODO: What's this
    }

    - {
    name: sign,
    type: QString,
    head: "Number",
    }

    - {
    name: code,
    type: QString,
    head: "Morse",
    # The 'sort_code' is a custom sort function that should populate
    # the variables "s1" and "s2". They will then be used for comparison.
    sort_code: sortMorse,
    }

    - {
    name: enabled,
    type: bool,
    head: "Enabled",
    # This boolean entry has a special 'table_type', which has the only currently
    # supported value 'checkbox'. That makes the model and the view not display
    # "0/1" or "false/true", but instead a checkbox.
    table_type: checkbox,
    # This reverses the initial sort order (when clicking for the
    # first time on the column header to sort). By making the sort
    # order descending, all enabled items will be sorted on top of the
    # table.
    sort_order: descending,
    }

    - {
    name: right,
    type: quint32,
    head: "Right",
    # This field will be horizontally aligned to the right. Besides
    # 'halign' (with "left", "right" and "center") you can also
    # specify valign (with "top", "bottom" and "vcenter").
    halign: right,
    }

    - {
    name: wrong,
    type: quint32,
    head: "Wrong",
    halign: right,
    }

    - {
    # This field has no 'head' entry -> won't be displayed in the model/view
    name: lastWrong,
    type: bool
    }

    - {
    # This field has no 'type' entry -> won't end up in the struct
    name: percent,
    head: "Error Rate",
    # The 'data_code' of code returns what the ::data() method from
    # the model should return (and this in turn is what get's shown in
    # the table)
    data_code: headPercent,
    sort_code: sortPercent,
    readonly: true,
    halign: right,
    }
  code:
    # Code sections will be included in the generated *.h/*.cpp files
    # at the proper locations.
    headPercent: |
      int total = chars[row].right + chars[row].wrong;
      if (total)
          return QString("%1 %").arg(chars[row].wrong*100/total);
      else
          return QString("100 %");
    sortPercent: |
      int t1 = one.right + one.wrong;
      int t2 = two.right + two.wrong;
      int s1 = 100;
      int s2 = 100;
      if (t1)
          s1 = one.wrong*100/t1;
      if (t2)
          s2 = two.wrong*100/t2;

    sortMorse: |
      QString s1;
      foreach(QChar c, one.code) {
          if (c == '.')
              s1.append("b");
          else
          if (c == '-')
              s1.append("c");
          else
          if (c == ' ')
              s1.append("x");
      }
      while (s1.count() < 10)
          s1.append("a");
      QString s2;
      foreach(QChar c, two.code) {
          if (c == '.')
              s2.append("b");
          else
          if (c == '-')
              s2.append("c");
          if (c == ' ')
              s2.append("x");
      }
      while (s2.count() < 10)
          s2.append("a");
